From 609a731ffe06c50c7ab4a0f06a16543942d78c98 Mon Sep 17 00:00:00 2001
From: isagues <isagues@itba.edu.ar>
Date: Wed, 12 May 2021 12:36:22 -0300
Subject: [PATCH 1/2] Agrego codigo IDT de la catedra

Signed-off-by: isagues <isagues@itba.edu.ar>
---
 Kernel/interruptions/defs.h          |  25 +++++
 Kernel/interruptions/exceptions.c    |  13 +++
 Kernel/interruptions/idtLoader.c     |  46 ++++++++
 Kernel/interruptions/idtLoader.h     |   6 ++
 Kernel/interruptions/interrupts.asm  | 154 +++++++++++++++++++++++++++
 Kernel/interruptions/interrupts.h    |  35 ++++++
 Kernel/interruptions/irqDispatcher.c |  17 +++
 Kernel/interruptions/time.c          |  15 +++
 Kernel/interruptions/time.h          |   8 ++
 9 files changed, 319 insertions(+)
 create mode 100755 Kernel/interruptions/defs.h
 create mode 100755 Kernel/interruptions/exceptions.c
 create mode 100755 Kernel/interruptions/idtLoader.c
 create mode 100644 Kernel/interruptions/idtLoader.h
 create mode 100755 Kernel/interruptions/interrupts.asm
 create mode 100755 Kernel/interruptions/interrupts.h
 create mode 100755 Kernel/interruptions/irqDispatcher.c
 create mode 100755 Kernel/interruptions/time.c
 create mode 100755 Kernel/interruptions/time.h

diff --git a/Kernel/interruptions/defs.h b/Kernel/interruptions/defs.h
new file mode 100755
index 0000000..abb71e9
--- /dev/null
+++ b/Kernel/interruptions/defs.h
@@ -0,0 +1,25 @@
+/***************************************************
+  Defs.h
+****************************************************/
+
+#ifndef _defs_
+#define _defs_
+
+
+/* Flags para derechos de acceso de los segmentos */
+#define ACS_PRESENT     0x80            /* segmento presente en memoria */
+#define ACS_CSEG        0x18            /* segmento de codigo */
+#define ACS_DSEG        0x10            /* segmento de datos */
+#define ACS_READ        0x02            /* segmento de lectura */
+#define ACS_WRITE       0x02            /* segmento de escritura */
+#define ACS_IDT         ACS_DSEG
+#define ACS_INT_386 	0x0E		/* Interrupt GATE 32 bits */
+#define ACS_INT         ( ACS_PRESENT | ACS_INT_386 )
+
+
+#define ACS_CODE        (ACS_PRESENT | ACS_CSEG | ACS_READ)
+#define ACS_DATA        (ACS_PRESENT | ACS_DSEG | ACS_WRITE)
+#define ACS_STACK       (ACS_PRESENT | ACS_DSEG | ACS_WRITE)
+
+
+#endif
\ No newline at end of file
diff --git a/Kernel/interruptions/exceptions.c b/Kernel/interruptions/exceptions.c
new file mode 100755
index 0000000..eb22673
--- /dev/null
+++ b/Kernel/interruptions/exceptions.c
@@ -0,0 +1,13 @@
+
+#define ZERO_EXCEPTION_ID 0
+
+static void zero_division();
+
+void exceptionDispatcher(int exception) {
+	if (exception == ZERO_EXCEPTION_ID)
+		zero_division();
+}
+
+static void zero_division() {
+	// Handler para manejar excepcíon
+}
\ No newline at end of file
diff --git a/Kernel/interruptions/idtLoader.c b/Kernel/interruptions/idtLoader.c
new file mode 100755
index 0000000..d53e6eb
--- /dev/null
+++ b/Kernel/interruptions/idtLoader.c
@@ -0,0 +1,46 @@
+#include <stdint.h>
+#include <idtLoader.h>
+#include <defs.h>
+#include <interrupts.h>
+
+#pragma pack(push)		/* Push de la alineación actual */
+#pragma pack (1) 		/* Alinear las siguiente estructuras a 1 byte */
+
+/* Descriptor de interrupcion */
+typedef struct {
+  uint16_t offset_l, selector;
+  uint8_t cero, access;
+  uint16_t offset_m;
+  uint32_t offset_h, other_cero;
+} DESCR_INT;
+
+#pragma pack(pop)		/* Reestablece la alinceación actual */
+
+
+
+DESCR_INT * idt = (DESCR_INT *) 0;	// IDT de 255 entradas
+
+static void setup_IDT_entry (int index, uint64_t offset);
+
+void load_idt() {
+
+  setup_IDT_entry (0x20, (uint64_t)&_irq00Handler);
+  setup_IDT_entry (0x00, (uint64_t)&_exception0Handler);
+
+
+	//Solo interrupcion timer tick habilitadas
+	picMasterMask(0xFE); 
+	picSlaveMask(0xFF);
+        
+	_sti();
+}
+
+static void setup_IDT_entry (int index, uint64_t offset) {
+  idt[index].selector = 0x08;
+  idt[index].offset_l = offset & 0xFFFF;
+  idt[index].offset_m = (offset >> 16) & 0xFFFF;
+  idt[index].offset_h = (offset >> 32) & 0xFFFFFFFF;
+  idt[index].access = ACS_INT;
+  idt[index].cero = 0;
+  idt[index].other_cero = (uint64_t) 0;
+}
diff --git a/Kernel/interruptions/idtLoader.h b/Kernel/interruptions/idtLoader.h
new file mode 100644
index 0000000..764d58d
--- /dev/null
+++ b/Kernel/interruptions/idtLoader.h
@@ -0,0 +1,6 @@
+#ifndef __IDT_LOADER_H__
+#define __IDT_LOADER_H__
+
+void load_idt();
+
+#endif
diff --git a/Kernel/interruptions/interrupts.asm b/Kernel/interruptions/interrupts.asm
new file mode 100755
index 0000000..e9c2947
--- /dev/null
+++ b/Kernel/interruptions/interrupts.asm
@@ -0,0 +1,154 @@
+
+GLOBAL _cli
+GLOBAL _sti
+GLOBAL picMasterMask
+GLOBAL picSlaveMask
+GLOBAL haltcpu
+GLOBAL _hlt
+
+GLOBAL _irq00Handler
+GLOBAL _irq01Handler
+GLOBAL _irq02Handler
+GLOBAL _irq03Handler
+GLOBAL _irq04Handler
+GLOBAL _irq05Handler
+
+GLOBAL _exception0Handler
+
+EXTERN irqDispatcher
+EXTERN exceptionDispatcher
+
+SECTION .text
+
+%macro pushState 0
+	push rax
+	push rbx
+	push rcx
+	push rdx
+	push rbp
+	push rdi
+	push rsi
+	push r8
+	push r9
+	push r10
+	push r11
+	push r12
+	push r13
+	push r14
+	push r15
+%endmacro
+
+%macro popState 0
+	pop r15
+	pop r14
+	pop r13
+	pop r12
+	pop r11
+	pop r10
+	pop r9
+	pop r8
+	pop rsi
+	pop rdi
+	pop rbp
+	pop rdx
+	pop rcx
+	pop rbx
+	pop rax
+%endmacro
+
+%macro irqHandlerMaster 1
+	pushState
+
+	mov rdi, %1 ; pasaje de parametro
+	call irqDispatcher
+
+	; signal pic EOI (End of Interrupt)
+	mov al, 20h
+	out 20h, al
+
+	popState
+	iretq
+%endmacro
+
+
+
+%macro exceptionHandler 1
+	pushState
+
+	mov rdi, %1 ; pasaje de parametro
+	call exceptionDispatcher
+
+	popState
+	iretq
+%endmacro
+
+
+_hlt:
+	sti
+	hlt
+	ret
+
+_cli:
+	cli
+	ret
+
+
+_sti:
+	sti
+	ret
+
+picMasterMask:
+	push rbp
+    mov rbp, rsp
+    mov ax, di
+    out	21h,al
+    pop rbp
+    retn
+
+picSlaveMask:
+	push    rbp
+    mov     rbp, rsp
+    mov     ax, di  ; ax = mascara de 16 bits
+    out	0A1h,al
+    pop     rbp
+    retn
+
+
+;8254 Timer (Timer Tick)
+_irq00Handler:
+	irqHandlerMaster 0
+
+;Keyboard
+_irq01Handler:
+	irqHandlerMaster 1
+
+;Cascade pic never called
+_irq02Handler:
+	irqHandlerMaster 2
+
+;Serial Port 2 and 4
+_irq03Handler:
+	irqHandlerMaster 3
+
+;Serial Port 1 and 3
+_irq04Handler:
+	irqHandlerMaster 4
+
+;USB
+_irq05Handler:
+	irqHandlerMaster 5
+
+
+;Zero Division Exception
+_exception0Handler:
+	exceptionHandler 0
+
+haltcpu:
+	cli
+	hlt
+	ret
+
+
+
+SECTION .bss
+	aux resq 1
\ No newline at end of file
diff --git a/Kernel/interruptions/interrupts.h b/Kernel/interruptions/interrupts.h
new file mode 100755
index 0000000..13c7279
--- /dev/null
+++ b/Kernel/interruptions/interrupts.h
@@ -0,0 +1,35 @@
+ /*
+ *   interrupts.h
+ *
+ *  Created on: Apr 18, 2010
+ *      Author: anizzomc
+ */
+
+#ifndef INTERRUPS_H_
+#define INTERRUPS_H_
+
+#include <idtLoader.h>
+
+void _irq00Handler(void);
+void _irq01Handler(void);
+void _irq02Handler(void);
+void _irq03Handler(void);
+void _irq04Handler(void);
+void _irq05Handler(void);
+
+void _exception0Handler(void);
+
+void _cli(void);
+
+void _sti(void);
+
+void _hlt(void);
+
+void picMasterMask(uint8_t mask);
+
+void picSlaveMask(uint8_t mask);
+
+//Termina la ejecución de la cpu.
+void haltcpu(void);
+
+#endif /* INTERRUPS_H_ */
diff --git a/Kernel/interruptions/irqDispatcher.c b/Kernel/interruptions/irqDispatcher.c
new file mode 100755
index 0000000..4077cda
--- /dev/null
+++ b/Kernel/interruptions/irqDispatcher.c
@@ -0,0 +1,17 @@
+#include <time.h>
+#include <stdint.h>
+
+static void int_20();
+
+void irqDispatcher(uint64_t irq) {
+	switch (irq) {
+		case 0:
+			int_20();
+			break;
+	}
+	return;
+}
+
+void int_20() {
+	timer_handler();
+}
diff --git a/Kernel/interruptions/time.c b/Kernel/interruptions/time.c
new file mode 100755
index 0000000..80761c5
--- /dev/null
+++ b/Kernel/interruptions/time.c
@@ -0,0 +1,15 @@
+#include <time.h>
+
+static unsigned long ticks = 0;
+
+void timer_handler() {
+	ticks++;
+}
+
+int ticks_elapsed() {
+	return ticks;
+}
+
+int seconds_elapsed() {
+	return ticks / 18;
+}
diff --git a/Kernel/interruptions/time.h b/Kernel/interruptions/time.h
new file mode 100755
index 0000000..31dbbf6
--- /dev/null
+++ b/Kernel/interruptions/time.h
@@ -0,0 +1,8 @@
+#ifndef _TIME_H_
+#define _TIME_H_
+
+void timer_handler();
+int ticks_elapsed();
+int seconds_elapsed();
+
+#endif
-- 
2.30.2

